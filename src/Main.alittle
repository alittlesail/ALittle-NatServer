
namespace NatServer;

protected var g_ConfigSystem:ALittle.IJsonConfig;
protected var g_ModulePath:string;

protected var g_DynamicNatSystem:ALittle.NatSystem;
protected var g_StaticNatSystem:ALittle.NatSystem;

// 模块入口函数
public async static __Module_Setup(string sengine_path, string module_path, string config_path)
{
    g_ConfigSystem = ALittle.CreateJsonConfig(config_path, true);
    g_ModulePath = module_path;

    // 加载Sip
    alittle.Require(sengine_path, "Script/Nat/NatSystem");

    // 获取当前服务器ip配置
    var wan_ip = g_ConfigSystem.GetConfig("wan_ip", "127.0.0.1");
    var yun_ip = g_ConfigSystem.GetConfig("yun_ip", "");

    // 一台服务器可以有多个NAT服务器，nat_route_num表示NAT服务器编号
    var nat_route_num = g_ConfigSystem.GetConfig("nat_route_num", 1);

    // 启动路由服务器
    __CPPAPI_ServerSchedule.StartRouteSystem(ALittle.RouteType.RT_NAT, nat_route_num);

    // 监听端口，提供Rtp服务器连接
    __CPPAPI_ServerSchedule.CreateConnectServer(yun_ip, wan_ip, ALittle.RoutePort.RT_NAT_CONNECT + nat_route_num);

    var static_start_nat_port = g_ConfigSystem.GetConfig("static_start_nat_port", 5060);
    var static_nat_port_count = g_ConfigSystem.GetConfig("static_nat_port_count", 1000);
    g_StaticNatSystem = new ALittle.NatSystem();
    g_StaticNatSystem.Setup(wan_ip, static_start_nat_port, static_nat_port_count);

    var dynamic_start_nat_port = g_ConfigSystem.GetConfig("dynamic_start_nat_port", 10000);
    var dynamic_nat_port_count = g_ConfigSystem.GetConfig("dynamic_nat_port_count", 10000);
    g_DynamicNatSystem = new ALittle.NatSystem();
    g_DynamicNatSystem.Setup(wan_ip, dynamic_start_nat_port, dynamic_nat_port_count);
}

// 模块结束函数
public static __Module_Shutdown()
{
    g_StaticNatSystem.Shutdown();
    g_DynamicNatSystem.Shutdown();
}

// 使用端口
public struct SS2NAT_QUsePort
{
    int port;	// 如果不为0，表示指定要某个端口
    string target_ip;
    int target_port;
}

public struct NAT2SS_AUsePort
{
    int port;	// 实际分配的端口
    string password;	// 鉴权密码
}

[Msg]
public await static HandleQUsePort(ALittle.IMsgCommon client, SS2NAT_QUsePort msg) : NAT2SS_AUsePort
{
    var rsp = new NAT2SS_AUsePort();
    if (msg.port == 0 || msg.port == null)
    {
        rsp.port, rsp.password = g_DynamicNatSystem.UsePort(client, msg.port);
        if (rsp.port != null && msg.target_ip != "" && msg.target_ip != null)
        {
            var error = g_DynamicNatSystem.SetTarget(client, rsp.port, msg.target_ip, msg.target_port);
            if (error != null) assert(false, error);
        }
    }
    else
    {
        rsp.port, rsp.password = g_StaticNatSystem.UsePort(client, msg.port);
        if (rsp.port != null && msg.target_ip != "" && msg.target_ip != null)
        {
            var error = g_StaticNatSystem.SetTarget(client, rsp.port, msg.target_ip, msg.target_port);
            if (error != null) assert(false, error);
        }
    }
    assert(rsp.port, "can't use port:"..msg.port);
    ALittle.Log("use port, from port:"..msg.port.." bind port:"..rsp.port.." target "..msg.target_ip..":"..msg.target_port);
    return rsp;
}

// 释放端口
public struct SS2NAT_NReleasePort
{
    int port;
}

[Msg]
public static HandleQReleasePort(ALittle.IMsgCommon client, SS2NAT_NReleasePort msg)
{
    ALittle.Log("release port, bind port:"..msg.port);
    g_DynamicNatSystem.ReleasePort(client, msg.port);
    g_StaticNatSystem.ReleasePort(client, msg.port);
}